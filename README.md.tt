# <%=config[:pascal_name]%>
![Tests](https://github.com/<%=config[:author]%>/<%=config[:name]%>/actions/workflows/build.yml/badge.svg)


TODO: Describe your project

## Install From Github

    go install github.com/<%=config[:author]%>/<%=config[:name]%>/cmd/<%=config[:unprefixed_name]%>@latest

## Build/ Run from Source

    go run cmd/<%=config[:name]%>/main.go
    go build -o <%=config[:name]%> cmd/<%=config[:name]%>/main.go
    ./<%=config[:name]%>

## Run Tests

    go test ...


# Ecosystem Notes
## Run and Delete These Commands for Public Projects

## Initialize the Project
The command `go mod tidy` looks through your source code and installs any dependencies missing in `go.mod`.  Most IDEs will run this command upon save along with running formatters and linters.

    go mod init github.com/<%=config[:author].downcase%>/<%=config[:name]%>
    go mod tidy

## Install / Update Dependencies

    go get ...

## Distribution Troublshooting
Versioned releases are cut exclusively by their git tag in Go eliminated the need to create "bumps version to x.y.z" commits!

Go releases are cached by "the go module proxy" which strictly adheres to immutable releases.  Even the `@latest` tag can render the wrong package when doing pre-release git repo cleanup.

Also, local caches will exist after installing a package, so you may want to clean those up and delete any binaries left behind:

    go clean -cache -modcache
    rm "${GOPATH}/bin/<%= config[:name] %>"

